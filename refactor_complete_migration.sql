-- REFACTOR AUTHORIZATION: MIGRATION HO√ÄN CH·ªàNH
-- Chuy·ªÉn ƒë·ªïi t·ª´ "Carrier Admin" sang "Platform Admin" 
-- Th·ª±c hi·ªán theo k·∫ø ho·∫°ch trong "1. Refactor 1.md"

BEGIN;

-- ==============================================
-- B∆Ø·ªöC 1: C·∫≠p nh·∫≠t ENUM v√† Schema C∆° b·∫£n
-- ==============================================

-- Th√™m vai tr√≤ PLATFORM_ADMIN v√†o ENUM user_role n·∫øu ch∆∞a c√≥
DO $$
BEGIN 
    IF NOT EXISTS (
        SELECT 1 FROM pg_type t 
        JOIN pg_enum e ON t.oid = e.enumtypid 
        WHERE t.typname = 'user_role' AND e.enumlabel = 'PLATFORM_ADMIN'
    ) THEN 
        ALTER TYPE public.user_role ADD VALUE 'PLATFORM_ADMIN'; 
        RAISE NOTICE 'ƒê√£ th√™m vai tr√≤ PLATFORM_ADMIN v√†o ENUM user_role';
    ELSE
        RAISE NOTICE 'Vai tr√≤ PLATFORM_ADMIN ƒë√£ t·ªìn t·∫°i';
    END IF;
END$$;

-- Cho ph√©p c·ªôt organization_id trong b·∫£ng profiles c√≥ th·ªÉ l√† NULL
-- ƒêi·ªÅu n√†y c·∫ßn thi·∫øt cho t√†i kho·∫£n PLATFORM_ADMIN kh√¥ng thu·ªôc t·ªï ch·ª©c n√†o
ALTER TABLE public.profiles
ALTER COLUMN organization_id DROP NOT NULL;

RAISE NOTICE 'ƒê√£ c·∫≠p nh·∫≠t b·∫£ng profiles cho ph√©p organization_id = NULL';

-- ==============================================
-- B∆Ø·ªöC 2: C·∫≠p nh·∫≠t RLS Policies cho Platform Admin
-- ==============================================

-- 1. C·∫≠p nh·∫≠t policy cho b·∫£ng cod_requests
DROP POLICY IF EXISTS "Involved parties can access COD requests" ON public.cod_requests;
DROP POLICY IF EXISTS "Users can access COD requests based on role" ON public.cod_requests;

CREATE POLICY "Users can access COD requests based on role"
ON public.cod_requests FOR ALL
USING (
  -- Platform Admin c√≥ th·ªÉ th·∫•y t·∫•t c·∫£
  (SELECT role FROM public.profiles WHERE id = auth.uid()) = 'PLATFORM_ADMIN' OR
  -- C√°c vai tr√≤ kh√°c ch·ªâ th·∫•y y√™u c·∫ßu c·ªßa m√¨nh
  (requesting_org_id = public.get_current_org_id()) OR
  (approving_org_id = public.get_current_org_id())
);

-- 2. C·∫≠p nh·∫≠t policy cho b·∫£ng street_turn_requests  
DROP POLICY IF EXISTS "Users can access street turn requests based on organization" ON public.street_turn_requests;

CREATE POLICY "Users can access street turn requests based on role"
ON public.street_turn_requests FOR ALL  
USING (
  -- Platform Admin c√≥ th·ªÉ th·∫•y t·∫•t c·∫£
  (SELECT role FROM public.profiles WHERE id = auth.uid()) = 'PLATFORM_ADMIN' OR
  -- C√°c vai tr√≤ kh√°c ch·ªâ th·∫•y y√™u c·∫ßu li√™n quan ƒë·∫øn t·ªï ch·ª©c m√¨nh
  (requesting_org_id = public.get_current_org_id()) OR
  (approving_org_id = public.get_current_org_id()) OR
  (dropoff_trucking_org_id = public.get_current_org_id())
);

-- 3. C·∫≠p nh·∫≠t policy cho b·∫£ng organizations
DROP POLICY IF EXISTS "Users can view their own organization" ON public.organizations;

CREATE POLICY "Users can view organizations based on role"
ON public.organizations FOR SELECT
USING (
  -- Platform Admin c√≥ th·ªÉ xem t·∫•t c·∫£ t·ªï ch·ª©c
  (SELECT role FROM public.profiles WHERE id = auth.uid()) = 'PLATFORM_ADMIN' OR
  -- C√°c vai tr√≤ kh√°c ch·ªâ xem t·ªï ch·ª©c c·ªßa m√¨nh
  (id = public.get_current_org_id())
);

-- 4. C·∫≠p nh·∫≠t policy cho b·∫£ng import_containers
DROP POLICY IF EXISTS "Users can access import containers based on organization" ON public.import_containers;

CREATE POLICY "Users can access import containers based on role"
ON public.import_containers FOR ALL
USING (
  -- Platform Admin c√≥ th·ªÉ th·∫•y t·∫•t c·∫£
  (SELECT role FROM public.profiles WHERE id = auth.uid()) = 'PLATFORM_ADMIN' OR
  -- C√°c vai tr√≤ kh√°c ch·ªâ th·∫•y container c·ªßa t·ªï ch·ª©c m√¨nh
  (organization_id = public.get_current_org_id())
);

-- 5. C·∫≠p nh·∫≠t policy cho b·∫£ng export_bookings
DROP POLICY IF EXISTS "Users can access export bookings based on organization" ON public.export_bookings;

CREATE POLICY "Users can access export bookings based on role"
ON public.export_bookings FOR ALL
USING (
  -- Platform Admin c√≥ th·ªÉ th·∫•y t·∫•t c·∫£
  (SELECT role FROM public.profiles WHERE id = auth.uid()) = 'PLATFORM_ADMIN' OR
  -- C√°c vai tr√≤ kh√°c ch·ªâ th·∫•y booking c·ªßa t·ªï ch·ª©c m√¨nh
  (organization_id = public.get_current_org_id())
);

-- 6. Policy cho billing tables (Platform Admin qu·∫£n l√Ω to√†n b·ªô billing)
DROP POLICY IF EXISTS "Users can view billing transactions based on organization" ON public.billing_transactions;

CREATE POLICY "Platform Admin can manage all billing transactions"
ON public.billing_transactions FOR ALL
USING (
  (SELECT role FROM public.profiles WHERE id = auth.uid()) = 'PLATFORM_ADMIN'
);

CREATE POLICY "Organizations can view their own billing transactions"  
ON public.billing_transactions FOR SELECT
USING (
  (SELECT role FROM public.profiles WHERE id = auth.uid()) != 'PLATFORM_ADMIN' AND
  (organization_id = public.get_current_org_id())
);

-- 7. ƒê·∫£m b·∫£o Platform Admin c√≥ th·ªÉ insert/update organizations
CREATE POLICY "Platform Admin can manage organizations"
ON public.organizations FOR ALL
USING (
  (SELECT role FROM public.profiles WHERE id = auth.uid()) = 'PLATFORM_ADMIN'
);

-- 8. ƒê·∫£m b·∫£o Platform Admin c√≥ th·ªÉ qu·∫£n l√Ω user profiles
DROP POLICY IF EXISTS "Users can update their own profile" ON public.profiles;

CREATE POLICY "Users can manage profiles based on role"
ON public.profiles FOR ALL
USING (
  -- Platform Admin c√≥ th·ªÉ qu·∫£n l√Ω t·∫•t c·∫£ profiles
  (SELECT role FROM public.profiles WHERE id = auth.uid()) = 'PLATFORM_ADMIN' OR
  -- Users ch·ªâ c√≥ th·ªÉ th·∫•y v√† c·∫≠p nh·∫≠t profile c·ªßa m√¨nh
  (id = auth.uid())
);

-- ==============================================
-- B∆Ø·ªöC 3: T·∫°o T√†i Kho·∫£n Platform Admin M·∫∑c ƒê·ªãnh
-- ==============================================

-- Ki·ªÉm tra xem ƒë√£ c√≥ t√†i kho·∫£n Platform Admin n√†o ch∆∞a
DO $$
DECLARE
    admin_count INTEGER;
BEGIN
    SELECT COUNT(*) INTO admin_count 
    FROM public.profiles 
    WHERE role = 'PLATFORM_ADMIN';
    
    IF admin_count = 0 THEN
        RAISE NOTICE 'Ch∆∞a c√≥ t√†i kho·∫£n Platform Admin n√†o. Vui l√≤ng t·∫°o th·ªß c√¥ng th√¥ng qua UI sau khi deploy.';
        RAISE NOTICE 'Ho·∫∑c s·ª≠ d·ª•ng Supabase Auth ƒë·ªÉ t·∫°o user v√† sau ƒë√≥ c·∫≠p nh·∫≠t role = PLATFORM_ADMIN';
    ELSE
        RAISE NOTICE 'ƒê√£ c√≥ % t√†i kho·∫£n Platform Admin trong h·ªá th·ªëng', admin_count;
    END IF;
END$$;

-- ==============================================
-- B∆Ø·ªöC 4: T·∫°o Function Helper cho Authorization
-- ==============================================

-- Function ki·ªÉm tra xem user hi·ªán t·∫°i c√≥ ph·∫£i Platform Admin kh√¥ng
CREATE OR REPLACE FUNCTION public.is_platform_admin()
RETURNS BOOLEAN
LANGUAGE sql
STABLE
SECURITY DEFINER
AS $$
  SELECT COALESCE(
    (SELECT role FROM public.profiles WHERE id = auth.uid()) = 'PLATFORM_ADMIN',
    false
  );
$$;

-- Function ki·ªÉm tra xem user hi·ªán t·∫°i c√≥ quy·ªÅn approve requests kh√¥ng
CREATE OR REPLACE FUNCTION public.can_approve_requests()
RETURNS BOOLEAN  
LANGUAGE sql
STABLE
SECURITY DEFINER
AS $$
  SELECT COALESCE(
    (SELECT role FROM public.profiles WHERE id = auth.uid()) IN ('PLATFORM_ADMIN', 'CARRIER_ADMIN'),
    false
  );
$$;

-- ==============================================
-- B∆Ø·ªöC 5: Validation v√† Ki·ªÉm Tra
-- ==============================================

-- Ki·ªÉm tra c√°c policy ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng
DO $$
DECLARE
    policy_count INTEGER;
BEGIN
    SELECT COUNT(*) INTO policy_count
    FROM pg_policies 
    WHERE schemaname = 'public' 
    AND policyname LIKE '%based on role%';
    
    RAISE NOTICE 'ƒê√£ t·∫°o th√†nh c√¥ng % policies v·ªõi logic based on role', policy_count;
END$$;

-- Ki·ªÉm tra functions ƒë√£ ƒë∆∞·ª£c t·∫°o
DO $$
DECLARE
    func_count INTEGER;
BEGIN
    SELECT COUNT(*) INTO func_count
    FROM pg_proc p
    JOIN pg_namespace n ON p.pronamespace = n.oid
    WHERE n.nspname = 'public' 
    AND p.proname IN ('is_platform_admin', 'can_approve_requests');
    
    RAISE NOTICE 'ƒê√£ t·∫°o th√†nh c√¥ng % helper functions cho authorization', func_count;
END$$;

COMMIT;

-- ==============================================
-- TH√îNG B√ÅO HO√ÄN TH√ÄNH
-- ==============================================

RAISE NOTICE '‚úÖ HO√ÄN TH√ÄNH REFACTOR AUTHORIZATION';
RAISE NOTICE '';
RAISE NOTICE 'üìã CHECKLIST SAU KHI MIGRATION:';
RAISE NOTICE '1. Deploy code Frontend v·ªõi authorization layer m·ªõi';
RAISE NOTICE '2. T·∫°o t√†i kho·∫£n Platform Admin ƒë·∫ßu ti√™n';
RAISE NOTICE '3. Ki·ªÉm th·ª≠ c√°c lu·ªìng nghi·ªáp v·ª• ch√≠nh';
RAISE NOTICE '4. C·∫≠p nh·∫≠t documentation cho team';
RAISE NOTICE '';
RAISE NOTICE '‚ö†Ô∏è  L∆ØU √ù:';
RAISE NOTICE '- C√°c Carrier Admin hi·ªán t·∫°i v·∫´n ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng';
RAISE NOTICE '- Platform Admin s·∫Ω c√≥ quy·ªÅn cao nh·∫•t, qu·∫£n l√Ω t·∫•t c·∫£';
RAISE NOTICE '- RLS policies ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t ƒë·ªÉ h·ªó tr·ª£ c·∫£ hai lo·∫°i admin'; 