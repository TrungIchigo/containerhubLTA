import { createClient } from '@/lib/supabase/client'

export interface CodFeeResult {
  success: boolean
  fee?: number
  message?: string
}

/**
 * Client-side COD fee calculation
 * @param originDepotId - Source depot ID
 * @param destinationDepotId - Destination depot ID
 * @returns COD fee in VND or error message
 */
export async function getCodFeeClient(
  originDepotId: string,
  destinationDepotId: string
): Promise<CodFeeResult> {
  try {
    console.log('üîç getCodFeeClient called with:', { originDepotId, destinationDepotId })
    const supabase = createClient()

    // If same depot, fee is 0
    if (originDepotId === destinationDepotId) {
      console.log('‚úÖ Same depot, returning fee 0')
      return {
        success: true,
        fee: 0,
        message: 'C√πng depot - Kh√¥ng ph√≠'
      }
    }

    // Query COD fee matrix
    console.log('üîç Querying cod_fee_matrix table from client...')
    const { data, error } = await supabase
      .from('cod_fee_matrix')
      .select('fee, distance_km')
      .eq('origin_depot_id', originDepotId)
      .eq('destination_depot_id', destinationDepotId)
      .single()
    
    console.log('üîç Client database query result:', { data, error })

    if (error) {
      console.error('‚ùå Error fetching COD fee from client:', error)
      return {
        success: false,
        message: 'Kh√¥ng th·ªÉ t√≠nh ph√≠ COD. Vui l√≤ng th·ª≠ l·∫°i.'
      }
    }

    if (!data) {
      console.log('‚ùå No data found for depot pair from client')
      return {
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin ph√≠ COD cho tuy·∫øn ƒë∆∞·ªùng n√†y.'
      }
    }

    console.log('‚úÖ COD fee found from client:', data.fee, 'VNƒê')
    return {
      success: true,
      fee: data.fee,
      message: data.distance_km ? `Kho·∫£ng c√°ch: ${data.distance_km}km` : undefined
    }

  } catch (error) {
    console.error('‚ùå Unexpected error in getCodFeeClient:', error)
    console.error('Error details:', {
      name: (error as any)?.name,
      message: (error as any)?.message,
      stack: (error as any)?.stack
    })
    return {
      success: false,
      message: 'C√≥ l·ªói x·∫£y ra khi t√≠nh ph√≠ COD.'
    }
  }
}

/**
 * Format COD fee for display
 * @param fee - Fee amount in VND
 * @returns Formatted fee string
 */
export function formatCodFee(fee: number): string {
  if (fee === 0) {
    return 'Mi·ªÖn ph√≠'
  }
  
  return new Intl.NumberFormat('vi-VN', {
    style: 'currency',
    currency: 'VND',
    minimumFractionDigits: 0,
    maximumFractionDigits: 0
  }).format(fee)
} 