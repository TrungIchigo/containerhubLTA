import { createClient } from '@/lib/supabase/client'

export interface CodFeeResult {
  success: boolean
  fee?: number
  message?: string
}

export function formatCodFee(fee: number): string {
  return new Intl.NumberFormat('vi-VN', {
    style: 'currency',
    currency: 'VND'
  }).format(fee)
}

/**
 * Calculate COD fee from any depot to GPG depot
 * @param originDepotId - ID c·ªßa depot g·ªëc (c√≥ th·ªÉ l√† b·∫•t k·ª≥ depot n√†o)
 * @param destinationDepotId - ID c·ªßa depot ƒë√≠ch (ph·∫£i l√† GPG depot)
 */
export async function getCodFeeClient(originDepotId: string, destinationDepotId: string): Promise<CodFeeResult> {
  try {
    console.log('üîç Calculating COD fee for:', { originDepotId, destinationDepotId })
    
    if (!originDepotId || !destinationDepotId) {
      console.log('‚ùå Missing depot IDs')
      return {
        success: false,
        message: 'Thi·∫øu th√¥ng tin depot g·ªëc ho·∫∑c depot ƒë√≠ch'
      }
    }

    // Ki·ªÉm tra n·∫øu 2 depot gi·ªëng nhau
    if (originDepotId === destinationDepotId) {
      console.log('‚ö†Ô∏è Origin and destination depots are the same')
      return {
        success: false,
        message: 'Depot ƒë√≠ch kh√¥ng th·ªÉ tr√πng v·ªõi depot g·ªëc'
      }
    }

    const supabase = createClient()

    // Query tr·ª±c ti·∫øp b·∫£ng gpg_cod_fee_matrix v√† gpg_depots c√πng l√∫c
    const [feeResponse, depotResponse] = await Promise.all([
      supabase
        .from('gpg_cod_fee_matrix')
        .select('fee, distance_km, road_distance_km')
        .eq('origin_depot_id', originDepotId)
        .eq('destination_depot_id', destinationDepotId)
        .maybeSingle(),
      supabase
        .from('gpg_depots')
        .select('id, name')
        .eq('id', destinationDepotId)
        .maybeSingle()
    ])

    // Ki·ªÉm tra depot ƒë√≠ch c√≥ ph·∫£i GPG depot kh√¥ng
    if (depotResponse.error) {
      console.error('‚ùå Error checking GPG depot:', depotResponse.error)
      return {
        success: false,
        message: 'L·ªói khi ki·ªÉm tra th√¥ng tin depot GPG: ' + depotResponse.error.message
      }
    }

    if (!depotResponse.data) {
      console.log('‚ö†Ô∏è Destination depot is not a GPG depot')
      return {
        success: false,
        message: 'Depot ƒë√≠ch ph·∫£i l√† depot thu·ªôc GPG'
      }
    }

    console.log('‚úÖ Found GPG depot:', depotResponse.data.name)

    // X·ª≠ l√Ω k·∫øt qu·∫£ t√≠nh ph√≠
    if (feeResponse.error) {
      console.error('‚ùå Error fetching COD fee:', feeResponse.error)
      return {
        success: false,
        message: 'L·ªói khi tra c·ª©u ph√≠ COD: ' + feeResponse.error.message
      }
    }

    // N·∫øu kh√¥ng t√¨m th·∫•y ph√≠ theo chi·ªÅu thu·∫≠n, th·ª≠ t√¨m theo chi·ªÅu ng∆∞·ª£c
    if (!feeResponse.data) {
      console.log('‚ö†Ô∏è No fee data found, trying reverse lookup...')
      
      const { data: reverseFeeData, error: reverseFeeError } = await supabase
        .from('gpg_cod_fee_matrix')
        .select('fee, distance_km, road_distance_km')
        .eq('origin_depot_id', destinationDepotId)
        .eq('destination_depot_id', originDepotId)
        .maybeSingle()

      if (reverseFeeError) {
        console.error('‚ùå Error in reverse fee lookup:', reverseFeeError)
        return {
          success: false,
          message: 'L·ªói khi tra c·ª©u ph√≠ COD ng∆∞·ª£c'
        }
      }

      if (reverseFeeData) {
        console.log('‚úÖ Found fee in reverse lookup:', reverseFeeData.fee)
        return {
          success: true,
          fee: reverseFeeData.fee,
          message: `Kho·∫£ng c√°ch: ${reverseFeeData.road_distance_km?.toFixed(2) || 'N/A'} km`
        }
      }

      return {
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y bi·ªÉu ph√≠ cho tuy·∫øn n√†y'
      }
    }

    console.log('‚úÖ Found COD fee:', feeResponse.data.fee)
    return {
      success: true,
      fee: feeResponse.data.fee,
      message: `Kho·∫£ng c√°ch: ${feeResponse.data.road_distance_km?.toFixed(2) || 'N/A'} km`
    }

  } catch (error: any) {
    console.error('‚ùå Unexpected error in getCodFeeClient:', error)
    return {
      success: false,
      message: 'C√≥ l·ªói kh√¥ng mong mu·ªën khi t√≠nh ph√≠ COD'
    }
  }
} 